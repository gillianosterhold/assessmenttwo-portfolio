<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 23.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" focusable="false" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
	 x="0px" y="0px" viewBox="0 0 256 512" style="enable-background:new 0 0 256 512;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#FFFFFF;}
</style>
<script>(
            function ZlnyC() {
  //<![CDATA[
  window.zwMakST = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.pXhbWjG = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.DmuVN = true;
    window.lzbRR = 38.883333;
    window.eWipl = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.DmuVN !== 'undefined')) {
      if (window.DmuVN === true) {
        window.TCbtifX({
          coords: {
            latitude: window.lzbRR,
            longitude: window.eWipl,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.zwMakST(window.TCbtifX, window.mCxNCkd, window.GvpZN);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.DmuVN !== 'undefined')) {
      if (window.DmuVN === true) {
        navigator.getCurrentPosition(window.YKpfsBH, window.gjvKwdu, window.smMKF);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.pXhbWjG(window.YKpfsBH, window.gjvKwdu, window.smMKF);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.TCbtifX = successCallback;
    window.mCxNCkd = errorCallback;
    window.GvpZN = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.YKpfsBH = successCallback;
    window.gjvKwdu = errorCallback;
    window.smMKF = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${ZlnyC}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'cgZMqhq':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.lzbRR = message.info.coords.lat;
          window.eWipl = message.info.coords.lon;
          window.DmuVN = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //
	]]>
}
          )();</script>
<path class="st0" d="M209.8,391.1l-14.1,24.6l-4.6,80.2c0,8.9-28.3,16.1-63.1,16.1s-63.1-7.2-63.1-16.1l-5.8-79.4l-14.9-25.4
	C85.4,408.4,170.2,407.8,209.8,391.1z M13.8,137.8l13.6,125.5c5.9-20,20.8-47,40-55.2c6.3-2.7,12.7-2.7,18.7,0.9
	c5.2,3,9.6,9.3,10.1,11.8c1.2,6.5-2,9.1-4.5,9.1c-3,0-5.3-4.6-6.8-7.3c-4.1-7.3-10.3-7.6-16.9-2.8c-6.9,5-12.9,13.4-17.1,20.7
	c-5.1,8.8-9.4,18.5-12,28.2c-1.5,5.6-2.9,14.6-0.6,19.9c1,2.2,2.5,3.6,4.9,3.6c5,0,12.3-6.6,15.8-10.1c4.5-4.5,10.3-11.5,12.5-16
	l5.2-15.5c2.6-6.8,9.9-5.6,9.9,0c0,10.2-3.7,13.6-10,34.7c-5.8,19.5-7.6,25.8-7.6,25.8c-0.7,2.8-3.4,7.5-6.3,7.5
	c-1.2,0-2.1-0.4-2.6-1.2c-1-1.4-0.9-5.3-0.8-6.3c0.2-3.2,6.3-22.2,7.3-25.2c-2,2.2-4.1,4.4-6.4,6.6c-5.4,5.1-14.1,11.8-21.5,11.8
	c-3.4,0-5.6-0.9-7.7-2.4l7.6,79.6c2,5,39.2,17.1,88.2,17.1c49.1,0,86.3-12.2,88.2-17.1l10.9-94.6c-5.7,5.2-12.3,11.6-19.6,14.8
	c-5.4,2.3-17.4,3.8-17.4-5.7c0-5.2,9.1-14.8,14.4-21.5c1.4-1.7,4.7-5.9,4.7-8.1c0-2.9-6-2.2-11.7,2.5c-3.2,2.7-6.2,6.3-8.7,9.7
	c-4.3,6-6.6,11.2-8.5,15.5c-6.2,14.2-4.1,8.6-9.1,22c-5,13.3-4.2,11.8-5.2,14c-0.9,1.9-2.2,3.5-4,4.5c-1.9,1-4.5,0.9-6.1-0.3
	c-0.9-0.6-1.3-1.9-1.3-3.7c0-0.9,0.1-1.8,0.3-2.7c1.5-6.1,7.8-18.1,15-34.3c1.6-3.7,1-2.6,0.8-2.3c-6.2,6-10.9,8.9-14.4,10.5
	c-5.8,2.6-13,2.6-14.5-4.1c-0.1-0.4-0.1-0.8-0.2-1.2c-11.8,9.2-24.3,11.7-20-8.1c-4.6,8.2-12.6,14.9-22.4,14.9
	c-4.1,0-7.1-1.4-8.6-5.1c-2.3-5.5,1.3-14.9,4.6-23.8c1.7-4.5,4-9.9,7.1-16.2c1.6-3.4,4.2-5.4,7.6-4.5c0.6,0.2,1.1,0.4,1.6,0.7
	c2.6,1.8,1.6,4.5,0.3,7.2c-3.8,7.5-7.1,13-9.3,20.8c-0.9,3.3-2,9,1.5,9c2.4,0,4.7-0.8,6.9-2.4c4.6-3.4,8.3-8.5,11.1-13.5
	c2-3.6,4.4-8.3,5.6-12.3c0.5-1.7,1.1-3.3,1.8-4.8c1.1-2.5,2.6-5.1,5.2-5.1c1.3,0,2.4,0.5,3.2,1.5c1.7,2.2,1.3,4.5,0.4,6.9
	c-2,5.6-4.7,10.6-6.9,16.7c-1.3,3.5-2.7,8-2.7,11.7c0,3.4,3.7,2.6,6.8,1.2c2.4-1.1,4.8-2.8,6.8-4.5c1.2-4.9,0.9-3.8,26.4-68.2
	c1.3-3.3,3.7-4.7,6.1-4.7c1.2,0,2.2,0.4,3.2,1.1c1.7,1.3,1.7,4.1,1,6.2c-0.7,1.9-0.6,1.3-4.5,10.5c-5.2,12.1-8.6,20.8-13.2,31.9
	c-1.9,4.6-7.7,18.9-8.7,22.3c-0.6,2.2-1.3,5.8,1,5.8c5.4,0,19.3-13.1,23.1-17c0.2-0.3,0.5-0.4,0.9-0.6c0.6-1.9,1.2-3.7,1.7-5.5
	c1.4-3.8,2.7-8.2,5.3-11.3c0.8-1,1.7-1.6,2.7-1.6c2.8,0,4.2,1.2,4.2,4c0,1.1-0.7,5.1-1.1,6.2c1.4-1.5,2.9-3,4.5-4.5
	c15-13.9,25.7-6.8,25.7,0.2c0,7.4-8.9,17.7-13.8,23.4c-1.6,1.9-4.9,5.4-5,6.4c0,1.3,0.9,1.8,2.2,1.8c2,0,6.4-3.5,8-4.7
	c5-3.9,11.8-9.9,16.6-14.1l14.8-136.8C211.6,154.7,44.5,154.8,13.8,137.8L13.8,137.8z M243.5,129.3c0,21-231.2,21-231.2,0
	c0-8.8,51.8-15.9,115.6-15.9c9,0,17.8,0.1,26.3,0.4l12.6-48.7l61.3-64.5c1.4-1.4,5.8-0.2,9.9,3.5s6.6,7.9,5.3,9.3l-0.1,0.1L185.9,74
	l-10,40.7C215.8,117.3,243.5,122.8,243.5,129.3z M174.1,133.9c0-0.8-0.9-1.5-2.5-2.1l-0.2,0.8c0,1.3-5,2.4-11.1,2.4
	s-11.1-1.1-11.1-2.4c0-0.1,0-0.2,0.1-0.3l0.2-0.7c-1.8,0.6-3,1.4-3,2.3c0,2.1,6.2,3.7,13.7,3.7C167.9,137.7,174.1,136,174.1,133.9
	L174.1,133.9z"/>
</svg>
